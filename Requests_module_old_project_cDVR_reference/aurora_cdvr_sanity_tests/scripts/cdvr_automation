#!/usr/bin/python

import os
import sys
import time
import requests
import json
import os.path
import subprocess 
from pprint import pprint

##########################################################################
#   Get Device
##############################################################
abspath = os.path.abspath(__file__)
scriptName = os.path.basename(__file__)
scriptDir = os.path.dirname(abspath)
scriptDir += '/'
# find the scripts portion of the path
# TODO potential bug if /scripts/ exists more than once in path
expected_dir = "/scripts/"
index = scriptDir.find(expected_dir)
if index < 0:
    print "unexpected directory layout"
    exit(1)
scriptDir = scriptDir[:index+len(expected_dir)]
# now add directories we find (excluding those with . in their name) to the sys.path so can import
include_these_paths = []
# os.walk provides full paths
for x in os.walk(scriptDir):
    if x[0].find(".") < 0:
        include_these_paths.append(x[0])
# adjust sys.path with the directories found
map(lambda a_path : sys.path.insert(0, a_path), include_these_paths)
# do the import
from readYamlConfig import readYAMLConfigs
# valid arg count?
sa = sys.argv
lsa = len(sys.argv)
if lsa != 3  and lsa != 2:
    print "Usage: [ python ] %s <lab name> [ <ip_override.yaml> ] " % scriptName
    print "Example: [ python ] %s lwr_integration deployed_vms.yaml" % scriptName
    print "         [ python ] %s lwr_integration " % scriptName
    print "  where lwr_integration is a directory under ../config expected to contain ips.yaml"
    print "        deployed_vms.yaml is an optional yaml file of components and their hosts/ips"
    print "        similar to ips.yaml in form (see config/README file for example)"
    print
    print " the content of the 2nd arg if provided overrides the same content if present "
    print " in content of 1st arg"
    sys.exit(1)
labName = sa[1]
vmInfo = None
if lsa > 2:
    vmInfo = sa[2]
cfg = readYAMLConfigs(labName, vmInfo)
if cfg:
    # store our args in config
    cfg['LABNAME'] = labName
    cfg['EXTRACONF'] = vmInfo

    # get to scripts directory for git repo check
    cwd = os.getcwd()
    os.chdir(scriptDir)

    # get git repo used and store in config
    gitrepos = subprocess.Popen(['git','remote','-v'], stdout=subprocess.PIPE).communicate()[0]
    gitfetch = gitrepos.splitlines()[0]
    cfg['GITREPO'] = gitfetch

    # get last commit hash and store in config
    lastcommit = subprocess.Popen(['git','log',"--pretty=format:'%H'",'-n','1'], stdout=subprocess.PIPE).communicate()[0]
    cfg['GITLASTCOMMIT'] = lastcommit[1:12]

    # restore to previous directory
    os.chdir(cwd)

    # print config
    if cfg['sanity']['print_cfg']:
        print "\nThe following configuration is being used:\n"
        pprint(cfg)
        print
else:
    print 'Error reading configs'
    sys.exit(1)
tests_to_run = cfg['tests-to-run']
#test_len= len(tests_to_run)
pass_count = 0
count = 0
for suite in tests_to_run:
    #suite_path = scriptDir + '/' + suite
    suite_path = scriptDir + suite
    if os.path.isfile(suite_path) and os.access(suite_path, os.R_OK):   
        count = count + 1
        if vmInfo == None:
            test_result = os.system( 'python ' + suite_path + ' ' + labName )
        else:
            test_result = os.system( 'python ' + suite_path + ' ' + labName + ' ' + vmInfo)
        if test_result == 0:
            print suite,"is passed successfully "
            pass_count = pass_count + 1
        else:
            print suite,"is not passed successfully "
            sys.exit(1)
if pass_count == count:
    print "all suites passed successfully"
    sys.exit(0)
