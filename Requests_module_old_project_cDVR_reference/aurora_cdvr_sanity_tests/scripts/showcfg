#!/usr/bin/python

# Based on work done by Joby Bett - Cisco 2015
#
# Ken Shaffer - Cisco Systems Inc, 2015

import os
import sys
from pprint import pprint
import subprocess
import mypaths
from readYamlConfig import readYAMLConfigs

# Find our current dir and set our base dir
abspath = os.path.abspath(__file__)
scriptName = os.path.basename(__file__)
scriptDir = os.path.dirname(abspath)
# Trim off the scripts dir
baseDir, null = os.path.split(scriptDir)

# valid arg count?
sa = sys.argv
lsa = len(sys.argv)
if lsa != 3  and lsa != 2:
    print "Usage: [ python ] %s <lab name> [ <ip_override.yaml> ] " % scriptName
    print "Example: [ python ] %s lwr_integration deployed_vms.yaml" % scriptName
    print "         [ python ] %s lwr_integration " % scriptName
    print "  where lwr_integration is a directory under ../config expected to contain ips.yaml"
    print "        deployed_vms.yaml is an optional yaml file of components and their hosts/ips"
    print "        similar to ips.yaml in form (see config/README file for example)"
    print 
    print " the content of the 2nd arg if provided overrides the same content if present "
    print " in content of 1st arg"
    sys.exit(1)

labName = sa[1]
vmInfo = None
if lsa > 2:
    vmInfo = sa[2]

cfg = readYAMLConfigs(labName, vmInfo)
if cfg:
    # store our args in config
    cfg['LABNAME'] = labName
    cfg['EXTRACONF'] = vmInfo

    # get to scripts directory for git repo check
    cwd = os.getcwd()
    os.chdir(scriptDir)

    # get git repo used and store in config
    gitrepos = subprocess.Popen(['git','remote','-v'], stdout=subprocess.PIPE).communicate()[0]
    gitfetch = gitrepos.splitlines()[0]
    cfg['GITREPO'] = gitfetch

    # get last commit hash and store in config
    lastcommit = subprocess.Popen(['git','log',"--pretty=format:'%H'",'-n','1'], stdout=subprocess.PIPE).communicate()[0]
    cfg['GITLASTCOMMIT'] = lastcommit[1:12]

    # restore to previous directory
    os.chdir(cwd)

    # print config
    print "\nThe following configuration is being used:\n"
    pprint(cfg)
    print
else:
    print 'Error reading configs'
    sys.exit(1)

exit(0)
